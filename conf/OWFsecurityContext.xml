<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	<sec:http entry-point-ref="casProcessingFilterEntryPoint">
        <sec:access-denied-handler error-page="/denied.gsp"/>

		<sec:intercept-url pattern="/unauthorized.jsp" filters="none" />
		<sec:intercept-url pattern="/cas*.jsp" filters="none" requires-channel="https" />
		<sec:intercept-url pattern="/css/jblock-style.css" filters="none" />
        <sec:intercept-url pattern="/js-lib/ext-*/**" filters="none"/>
		<sec:intercept-url pattern="/themes/owf-ext-theme/resources/themes/images/logout/**" filters="none" />
		<sec:intercept-url pattern="/logout.jsp" filters="none" />
        <sec:intercept-url pattern="/administration/monitoring" access="ROLE_ADMIN" />
        <sec:intercept-url pattern="/admin/**" access="ROLE_ADMIN"	requires-channel="https" />
		<sec:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"	requires-channel="https" />
<!--		<sec:x509 subject-principal-regex="CN=(.*?)," user-service-ref="userService" /> -->
        <sec:custom-filter ref="ozoneLogoutFilter" position="LOGOUT_FILTER"/><!-- CUSTOM LOGOUT FILTER -->
        <sec:custom-filter ref="casSingleSignOutFilter" after="LOGOUT_FILTER"/><!-- CAS SIGN OUT FILTER -->
		<sec:custom-filter ref="casProcessingFilter" after="CAS_FILTER" />
        <sec:port-mappings>
            <sec:port-mapping http="${ozone.unsecurePort}" https="${ozone.port}"/>
        </sec:port-mappings>
	</sec:http>

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider ref="casAuthenticationProvider" />
	</sec:authentication-manager>

    <!-- DEFAULT/CAS LOGOUT LOGIC - START  -->
    <!-- handles a logout request from the CAS server -->
    <bean id="casSingleSignOutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>

    <bean id="casSingleSignOutHttpSessionListener" class="org.jasig.cas.client.session.SingleSignOutHttpSessionListener" />
    
    <!-- Handle LOGOUT -->
	<bean id="ozoneLogoutFilter" class="ozone.securitysample.authentication.logout.OzoneLogoutFilter">
		<!-- LOGOUT URL -->
	    <constructor-arg index="0" type="java.lang.String" value="/logout" /> 
	    <constructor-arg index="1" type="org.springframework.security.web.authentication.logout.LogoutSuccessHandler">
	    	<bean class="ozone.securitysample.authentication.logout.OzoneLogoutSuccessHandler">
	    		<!-- DEFAULT SUCCESS LOGOUT URL -->
	    		<constructor-arg index="0" type="java.lang.String" value="/logout.jsp"  />
	    		<!-- IF CAS, USE THIS SUCCESS LOGOUT URL -->
	    		<constructor-arg index="1" type="java.lang.String" value="https://${ozone.host}:${ozone.port}/${ozone.cas.serverLogoutLocation}"  /> 
	    	</bean>
	    </constructor-arg>
	    <constructor-arg index="2">
	        <list value-type="org.springframework.security.web.authentication.logout.LogoutHandler">
	        	<!-- INVALIDATE SESSION -->
	        	<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
	        	<!-- HANDLE AUDIT LOG ENTRY -->
	        	<bean class="ozone.securitysample.authentication.logout.OzoneLogoutHandler"/>
	        </list>
	    </constructor-arg>
	</bean>
    <!-- DEFAULT/CAS LOGOUT LOGIC - END  -->
    
    <!-- AUTHENTICATION LOGIN LISTENERS - START  -->
    <!-- REQUIRED FOR AUDIT LOGGING OF AUTHENTICATION FAILURES -->
    <bean id="authenticationFailureListener" class="ozone.securitysample.authentication.listener.AuthenticationFailureListener" />
    
    <!-- REQUIRED FOR AUDIT LOGGING OF AUTHENTICATION SUCCESS -->
    <bean id="authenticationSuccessListener" class="ozone.securitysample.authentication.listener.AuthenticationSuccessListener"/>
    <!-- AUTHENTICATION LOGOUT LISTENERS - END  -->
    
	<bean id="casProcessingFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureHandler">
			<bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<property name="defaultFailureUrl" value="/cas_failed.jsp" />
			</bean>
		</property>
        <property name="authenticationSuccessHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
                <property name="defaultTargetUrl" value="/" />
            </bean>
        </property>
		<property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage" />
		<property name="proxyReceptorUrl" value="/secure/receptor" />
	</bean>

	<bean id="casProcessingFilterEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="https://${ozone.host}:${ozone.port}/${ozone.cas.serverLoginLocation}" />
		<property name="serviceProperties" ref="serviceProperties" />
	</bean>

	<bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="userDetailsService" ref="userService" />
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="ticketValidator" ref="ticketValidator" />
		<property name="key" value="an_id_for_this_auth_provider_only" />
	</bean>

    <bean id="ticketValidatorFactory" class="ozone.securitysample.cas.CasTicketValidatorFactoryImpl">
        <property name="casServiceUrl" value="https://${ozone.host}:${ozone.port}/${ozone.cas.serverName}" />
        <property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage" />
        <property name="proxyCallbackUrl" value="https://${ozone.host}:${ozone.port}/${ozone.cas.owf.serverSecureReceptorLocation}" />
    </bean>

    <bean id="ticketValidator" class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator" factory-bean="ticketValidatorFactory" factory-method="instantiateValidator" />

	<bean id="proxyGrantingTicketStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl" />

	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service" value="https://${ozone.host}:${ozone.port}/${ozone.cas.owf.jSpringCasSecurityCheckLocation}" />
		<property name="sendRenew" value="false" />
	</bean>

        <bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="pooled" value="false"/>
                <property name="url" value="ldap://www.dev.wisrd.org" />
		<property name="base" value="DC=dev,DC=wisrd,DC=org" />
                <property name="userDn" value="CN=Administrator,CN=Users,DC=dev,DC=wisrd,DC=org" />
                <property name="password" value="PFACCadmin12**" />
        </bean>

        <bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.AuthenticationProcessingFilterEntryPoint">
                <property name="loginFormUrl" value="/unauthorized.jsp" />
                <property name="forceHttps" value="true" />
        </bean>

        <bean id="ldapOperations" class="org.springframework.ldap.core.LdapTemplate">
                <constructor-arg ref="contextSource" />
				<property name="ignorePartialResultException" value="true"/>
        </bean>

        <bean id="userService" class="ozone.securitysample.authentication.ldap.LdapUserDetailsService">
                <property name="ldapOperations" ref="ldapOperations" />
                <!-- Distinguished Name (DN) of the LDAP entry in which to find the list of roles: admin and user -->
                <property name="roleSearchBase" value="CN=Roles"/>

                <!--  role search query:  an LDAP query that given the roleSearchBase will return 
                   the list of the roles (Role admin, role user, etc) that a user belongs to.  
                   The ? is replaced with the Subject from the certificate --> 
                <property name="roleSearchQuery" value="(&amp;(objectClass=group)(member=?))"/>

                <!-- Distinguished Name (DN) of the LDAP entry in which to find OWF User groups 
                     User groups are a way of grouping OWF users and assigning them common behaviors,
                     such as assigning sets of Widgets. --> 
                <property name="groupSearchBase" value="CN=Roles"/>

                <!-- group search query:  an LDAP query that given the groupSearchBase will 
                 return the list of groups (user groups) that a user could have 
                 The ? is replaced with the Subject from the certificate -->
                <property name="groupSearchQuery" value="(&amp;(objectClass=group)(member=?))"/>
        </bean>

</beans>
